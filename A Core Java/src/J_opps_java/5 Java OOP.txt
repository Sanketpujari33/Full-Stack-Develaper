Date:07/12/2023
-----------------
  Note
 ------
        - if a Base class reference to refer to the subclass object then it can invoke
            only the overridden methods of subclass

                Example:
                        class Vehicle
                         {
                             void drive(){..};
                         }
                         class Car extends Vehicle
                         {
                            void drive(){..};// overridden method
                            void changeGear(){..};
                         }
                         Vehicle v=new Vehicle();
                         v.drive();//invokes drive() of car
                         v.changeGear();//error

                         Car c= new Vehicle(); //error

Abstract classes
------------------
            - It is used to from the rules / specifications
            - A method to which is declared is called as abstract method
            - An abstract class contains zero or more abstract methods
                Example:
                        abstract class Sample
                        {
                             void xxx(){..}; // defined or implemented or concrete method
                             abstract void yyyy();// declared method
                        }
            - If a class extends an abstract class then we need to override all abstract methods
              else make the class as abstract

                Example:
                        class Sample1 extends Sample
                        {
                            void yyy(){..};
                            void zzz(){...};
                        }
                        abstract class Sample2 extends Sample
                        {
                            void ppp(){...};
                        }
            - We cannot create objects for abstract classes, but we can create references
               referring to the subclass object
               Example:
                        Sample s= new Sample();// error
                        Sample s1= new Sample1();// valid

            - Forces "is-a" relationship

                     refer program AbstractDemo.java

InterFaces
_______________
            - It is used to from the rules/ specifications
            - Does ont force "is-a" relationship
            - In an interface all data member are public, static and final by default
            - In an interface all Method are public, static and abstract by default
                    Example:
                            interface I1
                            {
                                [public static final] int max = 100;
                                [public abstract] void xxx();
                                [public abstract] void yyy();
                            }
                            []--> optional/by default
            - If a class implements an interface then we need to override all abstract methods
              else make the class as abstract
                    Example:
                    ---------
                            class C1  implements I1
                            {
                                    void xxx(){...};
                                    void yyy(){...};
                            }
            - We cannot create objects for interface but we can create references referring
                to the subclass object
                Example:
                        I1 i= new I1();// error
                        I1 i1= new c1(); valid

            - A class  can implement multiple interfaces
                 Example:
                        interface I2
                        {
                            void zzz();
                        }
                        class C2 implements I1, I2
                        {
                            void xxx(){..};
                            void yyy(){..};
                            void zzz(){..};
                        }
            - class to class --> extends
                class to interface --> implements
                interface to interface --> extends
                        Example:
                            interface I3 extends I1 {}
                interface to class --> error
            - An interface can extend multiple interfaces
                Example:
                        interface I4 extends I1, I2 {};

Note:
------
        - From java 8 version, we can define methods in interfaces using default keyword
        - From Java 8 version, we can define  static methods in interface
        - From java 9 version, we can define private methods in interface

                Refer program InterfaceDemo.java
Note:
------
        - Abstract and final are illegal combination of modifiers

            Example:
                    abstract final class Base{};// Error - abstract and final are illegal combination

Java Coding Standards
---------------------
- CLass Name:
            - First letter of every word is capital
                Example:
                        System, RuntimeException, ArrayIndexOutOfBoundsException, EmployeeTest
- Variable:
            - First letter of first word is small and the remaining words first letter is capital
                Example:
                        out, studentMarks, empSalary, empNetSalary
- Method:
            - First letter of first word is small and the remaining words first letter is capital
                Example:
                        printLn(), nextInt(), printStackTrace(), calculateTotal()
- Final variables:
            - all capitals
                Example:
                    MAX, MIN_VALUE, NORM_PRIORITY
- Keyword(syntax):
            - all small
                Example:
                    int, class, public, static
- Packages:
            -all small
                Example:
                     mypack1, com.jdbc.mysql, com.myprograms
