Date: 20/12/2023
-------------------
JUnit 5 tool with Mocking
-------------------------
       -  What is Unit Testing
                    - Unit Testing is a type of software testing where individual units of a software are tested
                    - The purpose of unit testing is to validate that each unit of the software code performs as expected
                    - Unit testing is done during the development phase of an application by the developers

 JUnit Framework Introduction
 ----------------------------
             - JUnit is a free and open source Unit Testing framework for Java applications
             - JUnit was developed by Kent Beck and Erich Gamma

JUnit 5
-------
               Refer diagram JUnit5 Architecture


                    JUnit 5 Architecture:

                                    +---------------------------------+
                                    |          Test Engine API        |
                                    +---------------------------------+
                                                    |
                                    +---------------v-----------------+
                                    |       Platform Launcher         |
                                    +---------------------------------+
                                                    |
                                    +---------------v-----------------+
                                    |       Test Engine (e.g.,       |
                                    |      Jupiter, Vintage, etc.)   |
                                    +---------------------------------+
                                                    |
                                    +---------------v-----------------+
                                    |         Test Discovery          |
                                    +---------------------------------+
                                                    |
                                    +---------------v-----------------+
                                    |        Test Execution           |
                                    +---------------------------------+

                       JUnit 5 Architecture:

                                          +------------------------+
                                          |      Test Engine       |
                                          +------------------------+
                                                  |
                                 +----------------+-------------------+
                                 |                |                   |
                         +----------------+ +----------------+ +----------------+
                         |   JUnit Jupiter| |   JUnit Vintage| |  Third-party   |
                         |   Test Engine  | |   Test Engine  | | Test Engines   |
                         +----------------+ +----------------+ +----------------+

                    JUnit Jupiter:         JUnit Jupiter provides the API for writing and executing tests in JUnit 5.
                    JUnit Vintage:         JUnit Vintage supports running JUnit 3 and JUnit 4 tests in JUnit 5.
                    Third-party Test       Third-party extensions or additional test engines that integrate
                    Engines:               with JUnit 5 for specialized testing needs.

                    Test Engine:           The Test Engine is responsible for discovering, executing, and
                                           reporting the results of tests written using a specific test
                                           framework, like JUnit Jupiter or JUnit Vintage.

                    Test Engine Discovery: The Test Engine Discovery mechanism locates and loads available
                                           Test Engines based on the annotations, configurations, and test
                                           classes present in the project.

                    Test Execution:        The Test Engine executes the discovered tests based on the provided
                                           configurations, runs assertions, and reports test results.

                    Reporting:             After test execution, the Test Engine generates reports detailing
                                           the test outcomes, successes, failures, errors, and other relevant
                                           information, which can be viewed or processed for analysis.

 JUnit5 Annotations
---------------------
       @Test
       @ParameterizedTest
       @ValueSource
       @CsvSource
       @Disabled


JUnit Assertions
-----------------
         - JUnit5 assertions are used to validate the expected output with the actual output of a test case
         - Assertions are static methods that we call in the test case  methods to verify the expected behavior
         - All JUnit Jupiter assertions are present in org.junit.jupiter.Assertions class

Unit Assertion Methods
-----------------------
                - assertEquals() and assertNotEquals()
                - assertTrue() and assertFalse()
                - assertNull() and assertNotNull()
                - assertThrows ()

Example Application
--------------------
                - Create a Maven Project
                 Click on file -> new -> Maven Project
                        Click Next
                    In Catalog Select: Internal
                    In Artifact Id Select maven-archetype-quickstart
                        Click Next
                    Group Id : junit5
                    Artifact Id: JUnit5Proj
                    package com.service
                         Click Finish
                Note: Change the JRE version to "1.8" in Build path

- Add The Following dependency in pom.xml file of JUnit5Proj


                      <dependency>
                          <groupId>org.junit.jupiter</groupId>
                          <artifactId>junit-jupiter-engine</artifactId>
                          <version>5.5.2</version>
                          <scope>test</scope>
                        </dependency>

                        <dependency>
                          <groupId>org.junit.jupiter</groupId>
                          <artifactId>junit-jupiter-params</artifactId>
                          <version>5.5.2</version>
                          <scope>test</scope>
                        </dependency>

                        <dependency>
                          <groupId>org.junit.platform</groupId>
                          <artifactId>junit-jupiter-runner</artifactId>
                          <version>1.5.2</version>
                          <scope>test</scope>
                        </dependency>

           - Create a class "Calculator" in com.service package of src/main/java

                        Calculator.java
                        ---------------
                        package com.service

                        public class Calculator{
                            public Integer add(Integer n1, Integer n2){
                                return n1+n2;
                            }
                            public Integer multiply(Integer n1, Integer n2){
                                return n1*n2;
                            }
                        }
           - To create JUnit test cases for calculator class

                        Right click on Calculator.java -> new ->other -> JUnit -> JUnit Test Case

                        package :com.service.test
                        Name: CalculatorTest
                        click next

                        Make Check mark to "add()" and "multiply()" and click Finish


                        CalculatorTest.java
                        --------------------
                            package com.service.test;

                            import static org.junit.Assert.assertEquals;
                            import static org.junit.jupiter.api.Assertions.*;

                            import org.junit.jupiter.api.Test;

                            import com.service.Calculator;

                            class CalculatorTest {

                            	@Test
                            	void testAdd() {
                            		Calculator cal= new Calculator();
                            		int actualResult =cal.add(10, 5);
                            		int expectedResult =15;
                            		assertEquals(expectedResult,actualResult );
                            	}

                            	@Test
                            	void testMultiply() {
                            		Calculator cal= new Calculator();
                            		int actualResult =cal.multiply(10,5);
                            		int expectedResult =50;
                            		assertEquals(expectedResult,actualResult );
                            	}

                            }
                        - Run the test case
                                Right click on CalculatorTest.java -> Run As -> JUnit Test

Parameterized Test using @ValueSource
-------------------------------------

PalindromeCheck.java
---------------------
         package com.service
                    public class PalindromeCheck{
                            public boolean isPalindrome(String str){
                                    String reverse ="";
                                    for(int i=str.length()-1; i>=0; i--)
                                                reverse=reverse+str.charAt(i);
                                                if(str.equals(reverse))
                                                return true;
                                                else
                                                return false;
                            }
                    }

Test case for PalindromeCheck.java
----------------------------------
PalindromeCheckTest.java
-----------------------------
package com.service.test

                        package com.service.test;

                        import static org.junit.jupiter.api.Assertions.*;

                        import org.junit.jupiter.api.Test;
                        import org.junit.jupiter.params.ParameterizedTest;
                        import org.junit.jupiter.params.provider.ValueSource;

                        import com.service.PalindromeCheck;

                        class PalindromeCheckTest {

                        	@ParameterizedTest
                        	@ValueSource(strings = {"madam","liril","radar","racecar","java"})
                        	@Test
                        	void testIsPalindrome(String str) {
                        		PalindromeCheck pc= new PalindromeCheck();
                        		boolean actual= pc.isPalindrome(str);
                        		assertTrue(actual);
                        	}

                        }
 Parameterized Test using @CsvSource
---------------------------------------
csv -> comma separated values

EvenOrOdd.java
--------------
                       package com.service;

                       public class EvenOrOdd {
                       	public String evenOrOddNumber(Integer number) {
                       		if(number % 2 == 0)
                       			return "even";
                       		else
                       			return "odd";

                       	}

                       }

EvenOrOddTest.java
--------------------
                   package com.service.test;

                   import static org.junit.Assert.assertEquals;

                   import org.junit.jupiter.params.ParameterizedTest;
                   import org.junit.jupiter.params.provider.CsvSource;

                   import com.service.EvenOrOdd;

                   class EvenOrOddTest {
                   	@ParameterizedTest
                   	@CsvSource(value= {"10,even","5,odd","12,even","15,odd"})//csv -comma separated values
                   	void testEvenOrOddNumber (Integer input, String expected) {
                   		EvenOrOdd evenOrOdd=new EvenOrOdd();
                   		String actualResult = evenOrOdd.evenOrOddNumber(input);
                   		assertEquals(expected, actualResult);
                   	}
                   }


assertThrows()
---------------
StringConvert.java
-------------------

                    package com.service;

                    public class StringConvert {
                    		public static Integer convertToInt(String str) {
                    			if(str==null || str.trim().length()==0)
                    				throw new IllegalArgumentException("Given String should not be null or empty");
                    			return Integer.valueOf(str);
                    		}
                    }

 StringConverterTest.java
 ---------------------------------

                package com.service.test;

                import static org.junit.jupiter.api.Assertions.*;

                import org.junit.jupiter.api.Test;

                import com.service.StringConvert;

                class StringConvertTest {

                	@Test
                	void testConvertToInt() {
                		String str =null;
                		assertThrows(IllegalArgumentException.class,()-> StringConvert.convertToInt(str));
                	}

                }

Mocking
-------
        - Mocking is a process used in unit testing when the unit being tested has external dependencies
        - The purpose of mocking is to isolate and focus on the code being tested and not on the behavior
           or state of external dependencies
        - In mocking, the dependencies are replaced by closely controlled replacements objects that simulate
            the behavior of the real objects

            Example:
                    public class UserService {
                                private UserDao dao;
                                public String getUserEmail (Integer id){
                                    String email = dao.getEmailById(id);
                                    String formatEmail email.toLowerCase(email);
                                    return formatEmail;
                                 }
                    }

                    public class UserDao{
                                 public String getEmailById(Integer id) {
                                     //database logic
                                     return email;
                                 }
                     }


        -  In order to test the above service class, the test case should invoke the actual DAO class
                and perform database operations
        - In order to test the service class without connecting to the database, we need to create a
            Dummy /Mock DAO Object
        - To Create a Mock objects we use Mocking in Unit testing

Mock Frameworks
---------------
        - Stub Based Mock framework (Ex: Easy Mock)
            Drawback
           -----------
                - Private methods cannot be mocked
                - final methods cannot be mocked
        - ByteCode Manipulation Based Mock Framework(Ex: Power Mock)

Example Application
--------------------
                - Create a Maven Project
                    Click on file -> new -> Maven Project
                        Click Next
                    In Catalog Select: Internal
                    In Artifact Id Select maven-archetype-quickstart
                        Click Next
                    Group Id : mocking
                    Artifact Id: MockProj
                    package com.service
            Note
            -----
                - Changes the JRE Version to "1.8" in Build path


- Add The Following dependency in pom.xml file


                      <dependency>
                          <groupId>junit</groupId>
                          <artifactId>junit</artifactId>
                          <version>4.13.2</version>
                          <scope>test</scope>
                        </dependency>
                      <dependency>
                          <groupId>org.powermock</groupId>
                          <artifactId>powermock-module-junit4</artifactId>
                          <version>1.6.4</version>
                          <scope>test</scope>
                        </dependency>
                      <dependency>
                          <groupId>org.powermock</groupId>
                          <artifactId>powermock-api-mockito</artifactId>
                          <version>1.6.4</version>
                          <scope>test</scope>
                        </dependency>

 - Create a package "com.mock.dao" in src/main/java folder of MockProj
 - Create an interface "UserDao" in com.mock.dao Package

    UserDao.java
  ------------------

            package com.mock.dao;

            public interface UserDao {
            		public String findNameById(Integer id);
            		public String findEmailById(Integer id);

            }

  - Created an implementation class "UserDaoImpl" in com.mock.dao package

            package com.mock.dao;

            public class UserDaoImpl implements UserDao {
            			public String findNameById(Integer id) {
            				return "Sanket";
            			}
            			public String findEmailById(Integer id) {
            				return "sanket@gmail.com";
            			}
            }


- Create a Service class "UserService" in com.mock.service package

 UserService
-------------
            package com.mock.service;

            import com.mock.dao.UserDao;

            public class UserService {
            	private UserDao dao;
            	public UserService(UserDao dao) {
            		this.dao=dao;
            		}
            	public UserService() {}
            	public String getNameByUsrId(Integer id) {
            		String name =dao.findEmailById(id);
            				return name;
            	}
            	public String getEmailByUserId(Integer id) {
            			String email=dao.findEmailById(id);
            			return email;
            	}
            	}
- Create a test class "UserServiceTest" in com.mock.service.test package of src/test/java

UserServiceTest.java
----------------------
                package com.mock.service.test;

                import static org.junit.Assert.*;

                import org.junit.Test;
                import org.powermock.api.mockito.PowerMockito;

                import com.mock.dao.UserDao;
                import com.mock.service.UserService;

                public class UserServiceTest {

                	@Test
                	public void testGetNameByUsrId() {
                		UserDao mockDao=PowerMockito.mock(UserDao.class);
                		PowerMockito.when(mockDao.findNameById(111)).thenReturn("Sanket");
                		UserService service=new UserService(mockDao);
                		String name =service.getNameByUserId(111);
                		assertEquals("Sanket",name);
                	}

                	@Test
                	public void testGetEmailByUserId() {
                		UserDao mockDao=PowerMockito.mock(UserDao.class);
                		PowerMockito.when(mockDao.findEmailById(111)).thenReturn("sanket@gmail.com");
                		UserService service=new UserService(mockDao);
                		String email =service.getEmailByUserId(111);
                		assertEquals("sanket@gmail.com",email);
                	}

                }

