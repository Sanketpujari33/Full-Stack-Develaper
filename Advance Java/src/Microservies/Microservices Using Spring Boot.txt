Date: 20/12/2023
-----------------
 Microservices
---------------
        - Microservices is used to breakup single large monolithic system into multiple
            independent components
        -  In Monolithic application all functionalities are part of single program
            running in a single environment

            Refer diagram Monolithic application

                    Monolithic Application Architecture:

                    +-----------------------------------+
                    |          Monolithic App           |
                    |                                   |
                    |  +-----------------------------+  |
                    |  |          Database           |  |
                    |  |              ^              |  |
                    |  +--------------|--------------+  |
                    |  |        Application          |  |
                    |  |       Logic & Services      |  |
                    |  |       (Single Program)      |  |
                    |  |  all functionalities are    |  |
                    |  |  part of single application |  |
                    |  |              ^              |  |
                    |  +--------------|--------------+  |
                    |  |          Frontend           |  |
                    |  |       User Interface        |  |
                    |  |    Web    client  Mobile    |  |
                    |  +-----------------------------+  |
                    |                                   |
                    +-----------------------------------+

                    In a monolithic architecture:
                    - All functionalities, such as logic, services, and the user interface, are part of a
                        single application.
                    - The entire application is deployed as a single unit and runs in a single environment.
                    - Components, such as database access, business logic, and UI, are tightly coupled within
                        the same codebase.
                    - Scaling and deployment often involve scaling the entire application, which can lead to
                        resource inefficiencies.

                    Key Characteristics:
                    - Tight coupling between components.
                    - Single codebase for the entire application.
                    - Limited flexibility for independent scaling or updates.
                    - Challenges with maintenance and scalability as the application grows.

        - In Microservices architecture the component are built and deployed independently
            to integrate into a single larger System

                Refer diagram Microservices Architecture


                Microservices Architecture:
                        Web            Mobile             Web              mobile             web
                +-------------+   +-------------+   +-------------+   +--------------+   +-------------+
                |   Client A  |   |   Client B  |   |   Client C  |   |   Client D   |   |   Client E |
                +------+------+---+------+------+---+------+------+---+------+------+---+------+------+
                       |               |               |               |               |               |
                       v               v               v               v               v               v
                +------+-------------+------+--------+------+--------+------+------+---+------+--------+
                |      API Gateway - North      |         |  API Gateway - South   | API Gateway- West |
                +------+------+---+------+------+---+------+------+---+------+------+---+------+--------+
                       |               |               |               |               |               |
                       v               v               v               v               v               v
                +------+-------------+------+--------+------+--------+------+------+---+------+--------+
                |  Load Balancer - North |     |  Load Balancer - South |      |  Load Balancer - West |
                +------+------+---+------+------+---+------+------+---+------+------+---+------+--------+
                       |               |               |               |               |               |
                       v               v               v               v               v               v
                +------+-------------+------+--------+------+--------+------+------+---+------+--------+
                |  Service X: Auth    |         |  Service Y: Orders  |         |  Service Z: Inventory|
                |   +-------------+   |         |   +-------------+   |         |   +-------------+    |
                |   |  Database X |   |         |   |  Database Y |   |         |   |  Database Z |    |
                +---+-------------+---+         +---+-------------+---+         +---+-------------+----+

        Netflix Eureka Server
        -----------------------
                - Netflix Eureka Server is used for building the server registery server and Eureka client
                    which will register themselves and discover other services to call REST APIs

                Refer diagram Eureka Server

                    Netflix Eureka Server:

                    +-----------------------------------+
                    |             Eureka Server         |
                    |                                   |
                    |  +-----------------------------+  |
                    |  |    Service Registry         |  |
                    |  |  (Registry of Services)     |  |
                    |  +-----------------------------+  |
                    |  |  Service 1                  |  |
                    |  |  (Microservice Instance)    |  |
                    |  |                             |  |
                    |  +-----------------------------+  |
                    |  |  Service 2                  |  |
                    |  |  (Microservice Instance)    |  |
                    |  |                             |  |
                    |  +-----------------------------+  |
                    |  |  ...                        |  |
                    |  |  (More Microservice         |  |
                    |  |   Instances)                |  |
                    +-----------------------------------+


                    digraph G {
                     node [shape=box, style="rounded,filled", fillcolor=lightblue]

                     studentService1 [label="Student Microservice 1"]
                     studentService2 [label="Student Microservice 2"]

                     studentService1 -> schoolMicroservice [label="Invokes Student Microservice"]
                     studentService2 -> schoolMicroservice [label="Invokes Student Microservice"]

                     schoolMicroservice [label="School Microservice", shape=doublecircle, fillcolor=orange]

                     eurekaServer [label="Eureka Server"]

                     eurekaServer -> studentService1 [label="Lookup for Student Microservice 1"]
                     eurekaServer -> studentService2 [label="Lookup for Student Microservice 2"]

                     studentService1 -> tomcatServer1 [label="Port: 2222"]
                     studentService2 -> tomcatServer2 [label="Port: 1111"]

                     subgraph cluster_eureka {
                        label = "Eureka Server"
                        eurekaServer
                     }

                     subgraph cluster_microservices {
                        label = "Microservices"
                        studentService1
                        studentService2
                        schoolMicroservice
                     }

                     subgraph cluster_tomcat {
                        label = "Tomcat Servers"
                        tomcatServer1 [label="Tomcat Server 1"]
                        tomcatServer2 [label="Tomcat Server 2"]
                     }
                    }

Developing a Microservice Application using the Spring Boot and Netflix Eureka servers
---------------------------------------------------------------------------------------

            - Create a Spring Starter Project "student-service" in STS
                Click on file -> new -> Spring Starter Project

                    name : student-service
                    Type: maven
                    java version: 17
                    group: student-service
                    Artifact: student-service
                    Package: com.student.service
                        Click next
                    In Project Dependencies and "Spring web" and Click Finish


            - Update application.properties file of src/main/resources folder of student-service to update
              the tomcat server port number
                Refer program application.properties

            - Create a JavaBean class "Student" in com.student.service package of src/main/java folder of
                    student-service
                    Refer program Student.java

            - Create a REST Controller class "StudentServiceController" in com.student.service package
                    Refer program StudentServiceController.java

            - Run "student-service" as Spring Boot App
                    Right click on student-service -> Run As -> Spring Boot App

            - Open browser and type the Following APIs
                    			- http://localhost:11111/getStudentDetailsForSchool/abcschool
                    			- http://localhost:11111/getStudentDetailsForSchool/xyzschool




